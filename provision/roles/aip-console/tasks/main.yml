---
- name: Get s3 aip console zip
  import_role:
    name: presign_then_get_s3_url
  vars:
    bucket: "{{cast_aip_s3_bucket}}" 
    object: "{{cast_aip_console_zip}}"
    dest: "/tmp/AIP_CONSOLE.zip"

- name: Install unzip
  become: yes
  apt:
    name: unzip

- name: Unzip aip console release
  become: yes
  unarchive:
    src: /tmp/AIP_CONSOLE.zip
    dest: /tmp/
    remote_src: yes

- name: Install openjdk-8
  become: yes
  apt:
    name: openjdk-8-jdk-headless
    state: latest

# TODO: move to role filebeat
- name: Install filebeat
  become: yes
  import_role:
      name: geerlingguy.filebeat
  when: logcollector_host is defined

- name: Copy filebeat config
  become: yes
  template:
      src: filebeat.yml.j2
      dest: /etc/filebeat/filebeat.yml
  notify: restart filebeat
  when: logcollector_host is defined
  
- name: Copy aip console defaults
  template:
      src: AIPConsole.defaults.j2
      dest: /tmp/AIPConsole.defaults

- name: Install aip console webi
  become: yes
  command: "java -jar /tmp/{{cast_aip_console_jar}} -defaults-file /tmp/AIPConsole.defaults -auto"
  args:
      creates: '{{cast_webi_install_dir}}'
  notify: Restart aip console service

- name: Copy aip console service unit
  become: yes
  template:
      src: aip-console.service.j2
      dest: /etc/systemd/system/aip-console.service
  notify: Restart aip console service

#
# Below is a hack to inject tokens in the console database
# TODO: replace with console admin api usage
# The admin api does not add nodes that are not reacheable!
#

- name: Start aip console service
  tags:
    - service
  become: yes
  service:
      name: aip-console.service
      state: started

- name: Wait for application port become available
  wait_for:
      host: "{{public_ip_address}}"
      port: 8081
      delay: 10

- name: Prepare h2 install path
  become: yes
  file:
    name: /var/lib/h2
    state: directory

- name: Get h2 zip
  become: yes
  unarchive:
      remote_src: yes
      src: http://www.h2database.com/h2-2019-03-13.zip
      dest: /var/lib/h2

- name: Set aip node fact from fetched aip properties
  tags: 
    - aipnode
  set_fact:
      aipnodes: "{{ (aipnodes|default({}))|combine({item.path.split('/')[-2]: { 'token': lookup('ini', 'liquibase.parameters.baseToken type=properties file={{item.src}}'), 'port': lookup('ini', 'server.port type=properties file={{item.src}}') }})}}"
  with_filetree: aip-nodes/
  when: item.state == 'file'

- name: Init aip console sql
  tags: 
    - aipnode
  template:
      src: init.sql.j2
      dest: /tmp/init.sql


- name: Inject node config in database
  tags:
      - aipnode
  become: yes
  shell: |
       java -cp /var/lib/h2/h2/bin/h2*.jar org.h2.tools.Shell -url "jdbc:h2:file:/var/lib/aip/AipConsole/data/db/hellodb;AUTO_SERVER=true" -user sa -sql "$(</tmp/init.sql)"
  args:
      executable: /bin/bash

- name: Force console restart
  tags:
    - restart
  shell: echo "restart console $(date +%s)"
  notify: Restart aip console service


# Configure dashboard
#
#
# Login, get all cookies
- name: Get cookie
  tags:
    - aipdashboard
  shell: |
    curl -s -I -u cast:cast -XGET http://localhost:8081/api/user | sed -n -E 's/^Set-Cookie: (.*;) Path=.*$/\1/p' | paste -s -d ' '
  register: cookie

- name: Update dashboard settings
  tags:
    - aipdashboard
  shell: |
    curl -u cast:cast -X PUT --header 'Cookie: {{cookie.stdout}}' --header 'X-XSRF-TOKEN: {{cookie.stdout.split(' ')[0].split('=')[1][:-1]}}' --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{  "url": "http://{{aip_dashboard_ip}}:8080/CAST-RESTAPI",  "username": "cast",  "integrationKey": "cast"}' 'http://localhost:8081/api/settings/dashboard-settings'

    # There is a bug with internal host definition in console
    #  So skip this settings to use the default behavior that uses the same database as the console.

    #- name: Update dashboard measurements settings
    #  tags:
    #    - aipdashboard
    #  shell: |
    #    curl -u cast:cast -X PUT --header 'Cookie: {{cookie.stdout}}' --header 'X-XSRF-TOKEN: {{cookie.stdout.split(' ')[0].split('=')[1][:-1]}}' --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{"database":{"host":"{{aip_postgres_ip}}","port":5432,"userName":"operator","password":"CastAIP"},"schemaName":"general_measure"}' 'http://localhost:8081/api/settings/measurement-settings'
    #
