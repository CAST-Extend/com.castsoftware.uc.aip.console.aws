---
# Expands the platform in the given subnet:
# - Create security groups (in-out networking rule)
# - Public keys
# - Create instances
#
# All ec2 instances created here are tagged with "Stage: expand"
# This tag is used in subsequents inventories to group
#  instances by stage and limit (with --limit) the set
#  of instances to apply playbooks to.
#
# Once an instance with "Stage: expand" has the matching playbook
#   applied, it is tagged with "Stage: init"

- hosts: localhost:&expand
  connection: local

  tasks:

    - name: Open http port for aip console
      tags:
        - aipconsole
      ec2_group:
        name: aip_console
        description: Allow aip console http port
        rules:
          - proto: tcp
            ports:
              - 8081
            cidr_ip: 0.0.0.0/0
            rule_desc: allow http port for aip console


- hosts: localhost:&expand-aip-win-registry
  connection: local

  vars:
    aip_tenancy: aipcustomer1

  tasks:
    - name: Find latest baked ami for aip windows registry
      ec2_ami_info:
        owner: self
        filters:
          name: aip_win_registry-{{cast_aip_version}}
      register: ami_find

    - name: Create windows registry 
      ec2:
        instance_type: t2.medium
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.images[0].image_id}}'
        groups:
          - aip_default
          - winsec
        wait: true
        private_ip: '{{aip_win_registry_ip}}'
        exact_count: 1
        count_tag:
          Name: "{{aip_tenancy}}__aip_win_registry" 
        instance_tags:
          Base: aws_windows
          Tenancy: "{{aip_tenancy}}"
          Stage: expand
          Name: "{{aip_tenancy}}__aip_win_registry" 
          Groups: aip_win_registry
          Swarm: swarm_worker
      register: aip_win_registry

- hosts: localhost:&expand-aip-linux-registry
  connection: local

  vars:
    aip_tenancy: aipcustomer1

  tasks:
    - name: Find latest baked ami for aip linux registry
      ec2_ami_info:
        owner: self
        filters:
          name: aip_linux_registry-{{cast_aip_version}}
      register: ami_find

    - name: Create linux registry 
      ec2:
        instance_type: t2.small
        key_name: aip_controller_key
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.images[0].image_id}}'
        groups:
          - aip_default
        wait: true
        private_ip: '{{aip_linux_registry_ip}}'
        exact_count: 1
        count_tag:
          Name: "{{aip_tenancy}}__aip_linux_registry" 
        instance_tags:
          Base: aws_linux
          Tenancy: "{{aip_tenancy}}"
          Stage: expand
          Name: "{{aip_tenancy}}__aip_linux_registry" 
          Groups: aip_linux_registry
          Swarm: swarm_master
      register: aip_linux_registry

- hosts: localhost:&expand-posgres
  connection: local

  tasks:

    - name: Create aip postgres nodes
      tags:
        - aippostgres
      ec2:
        key_name: aip_controller_key
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ debian_ami_id }}'
        groups:
          - aip_default
        wait: true
        private_ip: '{{aip_postgres_ip}}'
        instance_tags:
          Stage: expand
          Name: aip_postgres
          Groups: aip_postgres_hosts
      when: "aip_postgres_ip not in (hostvars.values()|map(attribute='private_ip_address')|list|string)"

- hosts: localhost:&expand-dashboard
  connection: local

  tasks:
    - name: Create aip dashboard nodes
      tags:
        - aipdashboard
      ec2:
        key_name: aip_controller_key
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ debian_ami_id }}'
        groups:
          - aip_default
        wait: true
        private_ip: '{{aip_dashboard_ip}}'
        instance_tags:
          Stage: expand
          Name: aip_dashboard
          Groups: aip_dashboard_hosts
      when: "aip_dashboard_ip not in (hostvars.values()|map(attribute='private_ip_address')|list|string)"

- hosts: localhost:&expand-console
  connection: local

  tasks:
    - name: Create aip console nodes
      tags:
        - aipconsole
      ec2:
        key_name: aip_controller_key
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ debian_ami_id }}'
        groups:
          - aip_default
          - aip_console
        wait: true
        private_ip: '{{aip_console_ip}}'
        instance_tags:
          Stage: expand
          Name: aip_console
          Groups: aip_console_hosts
      when: "aip_console_ip not in (hostvars.values()|map(attribute='private_ip_address')|list|string)"


#############
#AIP POSTGRES
#############

- hosts: aip_postgres_hosts
  name: Postgres aip nodes
  remote_user: admin
  gather_facts: no

  vars:
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no
    cast_postgres_port: 5432
    cast_postgres_host: '{{aip_postgres_ip}}'

  pre_tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        timeout: 320

    - name: Gather facts for the first time
      setup:

    - name: Install ntp
      become: yes
      apt:
        name: ntp

    - name: Install pip
      become: yes
      apt:
        name: python-pip

    - name: Check NTP service
      service: name=ntp state=started

  roles:
    - { role: aip-css, become: true }

  #TODO:duplication
  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init

#######################
# AIP NODES - REGISTRY
#######################
- hosts: aip_win_*:&aws_windows
  name: Common configuration for windows instances
  gather_facts: no

  vars:
    cast_postgres_port: 5432
    cast_postgres_host: '{{aip_postgres_ip}}'

  pre_tasks:
    - name: Wait for WinRM to come up
      wait_for_connection:
        #delay: 60
        timeout: 320

    - name: Gather facts for the first time
      setup:

    - name: Configure windows firewall for docker swarm
      import_tasks: prepare-firewall-for-swarm.yml

    # In case the root ebs has changed, resize the C partition
    - name: Resize previously created partition to it's maximum size
      win_partition:
        drive_letter: C
        partition_size: -1

  handlers:
    - name: Restart docker daemon
      win_command: powershell Restart-Service docker


  tasks:
    - name: Configure docker daemon
      win_template:
        src: docker_daemon_win.json
        dest: C:\ProgramData\docker\config\daemon.json
      notify: Restart docker daemon

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init
          Swarm: swarm_worker

- hosts: aip_linux_*:&aws_linux
  name: Common configuration for linux instances
  gather_facts: no

  pre_tasks:
    - name: Wait for connection
      wait_for_connection:
        #delay: 60
        timeout: 320

    - name: Gather facts for the first time
      setup:

  handlers:
    - name: Restart docker service
      become: yes
      service:
        name: docker
        state: restarted


  tasks:
    - name: Docker daemon configuration
      become: yes
      block:
      - name: Apply template for daemon.json
        template:
          src: docker_daemon_linux.json
          dest: /etc/docker/daemon.json
        notify: Restart docker service

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init


- hosts: swarm_master:&aws_linux
  name: Configuration for linux swarm master
  gather_facts: no
  tasks: 

    - name: List swarm managers
      shell: docker node ls -q -f "role=manager"
      register: swarm_managers
      ignore_errors: yes 

    - name: Init swarm master
      shell: "docker swarm init --advertise-addr {{private_ip_address}}"
      when: swarm_managers and swarm_managers.stdout == ""

    - name: Get swarm token
      shell: "docker swarm join-token -q worker"
      register: swarm_token


    - name: List portainer container
      shell: docker service ls -q -f "name=portainer"
      register: portainer_service
      
    - name: Install portainer
      block:
        - name: Create portainer tmp directory
          file:
            path: /tmp/portainer
            state: directory
        - name: Deploy portainer container
          shell: docker service create --name portainer --publish 9000:9000 --constraint 'node.role == manager'  --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock --mount type=bind,src=/tmp/portainer,dst=/data portainer/portainer:latest -H unix:///var/run/docker.sock
      when: portainer_service.stdout == ""

    - name: Compose stack file for aip
      template:
        src: aip-stack.yml
        dest: /tmp/aip-stack.yml

    - name: Tag with the swarm join token
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Swarm_token: "{{swarm_token.stdout}}"


- hosts: swarm_worker:&aws_linux
  name: Configuration swarm linux workers
  gather_facts: no

  tasks:
    - name: Get join token from master instance
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_instance_info:
        filters:
          "tag:Swarm": swarm_master
      register: swarm_master_instance

    - name: Join swarm as linux worker
      remote_user: admin
      block: 
        - name: Swarm join
          shell: "docker swarm join --token {{swarm_master_instance.instances[0].tags.Swarm_token}} {{swarm_master_instance.instances[0].private_ip_address}}:2377"

- hosts: swarm_worker:&aws_windows
  name: Configuration swarm windows workers
  gather_facts: no

  tasks:
    - name: Get join token from master instance
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_instance_info:
        filters:
          "tag:Swarm": swarm_master
      register: swarm_master_instance

    - name: Join swarm as windows worker
      block: 
        - name: Swarm join
          win_command: "docker swarm join --token {{swarm_master_instance.instances[0].tags.Swarm_token}} {{swarm_master_instance.instances[0].private_ip_address}}:2377"



###############
# AIP DASHBOARD
###############

- hosts: aip_dashboard_hosts
  name: Dashboard node
  remote_user: admin
  gather_facts: no

  vars:
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no

  pre_tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        timeout: 320

    - name: Gather facts for the first time
      setup:

  roles:
    - { role: aip-dashboard }

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init

################
# AIP WEBCONSOLE
###############

- hosts: aip_console_hosts
  name: Webi aip console nodes
  remote_user: admin
  gather_facts: no

  vars:
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no

  pre_tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        timeout: 320

    - name: Gather facts for the first time
      setup:

  roles:
    - { role: aip-console }

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init
