---
# Expands the platform in the given subnet:
# - Create security groups (in-out networking rule)
# - Public keys
# - Create instances
#
# All ec2 instances created here are tagged with "Stage: expand"
# This tag is used in subsequents inventories to group
#  instances by stage and limit (with --limit) the set
#  of instances to apply playbooks to.
#
# Once an instance with "Stage: expand" has the matching playbook
#   applied, it is tagged with "Stage: init"


# ####################################
# Common resources for AIP environment
# ####################################
- hosts: localhost:&expand
  connection: local
  tasks: 

    # TODO: This group is used by all instances. This is too open
    - name: Open http port for AIP stacks
      ec2_group:
        name: aip_stacks
        description: Allow aip console http port
        rules:
          - proto: tcp
            from_port: 8000
            to_port: 9000
            cidr_ip: 0.0.0.0/0
            rule_desc: Ports for management and application
    # TODO: this group is used by all windows instances. This is too open
    - name: Create sec group for WinRM and RDP
      ec2_group:
          name: winsec
          description: WinRM RDP security group
          rules:
              - proto: tcp
                ports:
                    - 3389
                cidr_ip: 0.0.0.0/0
                rule_desc: RDP
              - proto: tcp
                ports:
                    - 5986
                cidr_ip: 0.0.0.0/0
                rule_desc: WinRM-HTTPS
# #############################################
# Expand Docker linux registry and swarm master
# #############################################
- hosts: localhost:&expand-aip-linux-registry
  connection: local
  tasks:
    - name: Find latest baked ami for aip linux registry
      ec2_ami_info:
        owner: self
        filters:
          name: aip_linux_registry-{{cast_aip_version}}
      register: ami_find

    - name: Create linux registry 
      ec2:
        instance_type: t2.small
        key_name: aip_controller_key
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.images[0].image_id}}'
        groups:
          - aip_default
          - aip_stacks
        wait: true
        private_ip: '{{aip_linux_registry_ip}}'
        exact_count: 1
        count_tag:
          Name: "{{aip_tenancy}}__aip_linux_registry" 
        instance_tags:
          Base: aws_linux
          Registry: linux
          Stage: expand
          Groups: aip_linux_master_node
          Swarm: swarm_master
          Tenancy: "{{aip_tenancy}}"
          Name: "{{aip_tenancy}}__aip_linux_registry" 
# ##############################
# Expand Docker windows registry
# ##############################
- hosts: localhost:&expand-aip-win-registry
  connection: local

  tasks:
    - name: Find latest baked ami for aip windows registry
      ec2_ami_info:
        owner: self
        filters:
          name: aip_win_registry-{{cast_aip_version}}
      register: ami_find

    - name: Create windows registry 
      ec2:
        instance_type: t2.medium
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.images[0].image_id}}'
        groups:
          - aip_default
          - winsec
        wait: true
        private_ip: '{{aip_win_registry_ip}}'
        exact_count: 1
        count_tag:
          Name: "{{aip_tenancy}}__aip_win_registry" 
        instance_tags:
          Base: aws_windows
          Registry: windows
          Swarm: swarm_worker
          Groups: aip_win_worker_node
          Stage: expand
          Tenancy: "{{aip_tenancy}}"
          Name: "{{aip_tenancy}}__aip_win_registry" 

# ########################
# Expand Swarm window node
# ########################
- hosts: localhost:&expand-aip-win-node
  connection: local

  tasks:
    - name: Find latest baked ami for aip windows
      ec2_ami_info:
        owner: self
        filters:
          # TODO: rename to aip_win_node
          name: aip_win_registry-{{cast_aip_version}}
      register: ami_find

    - name: Create windows node 
      ec2:
        instance_type: t2.large
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.images[0].image_id}}'
        groups:
          - aip_default
          - winsec
        wait: true
        exact_count: "{{aip_win_node_count}}"
        count_tag:
          Base: aws_windows
          Swarm: swarm_worker
        instance_tags:
          Base: aws_windows
          Swarm: swarm_worker
          Groups: aip_win_worker_node
          Stage: expand
          Tenancy: "{{aip_tenancy}}"
          Name: "{{aip_tenancy}}__aip_win_node" 

# ########################
# Expand Swarm linux node
# ########################
- hosts: localhost:&expand-aip-linux-node
  connection: local
  tasks:
    - name: Find latest baked ami for aip linux registry
      ec2_ami_info:
        owner: self
        # TODO: rename image to aip_linux
        filters:
          name: aip_linux_registry-{{cast_aip_version}}
      register: ami_find

    - name: Create linux node 
      ec2:
        instance_type: t2.small
        key_name: aip_controller_key
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.images[0].image_id}}'
        groups:
          - aip_default
          - aip_stacks
        wait: true
        exact_count: "{{aip_linux_node_count}}"
        count_tag:
          Base: aws_linux
          Swarm: swarm_worker
        instance_tags:
          Base: aws_linux
          Swarm: swarm_worker
          Groups: aip_linux_worker_node
          Stage: expand
          Tenancy: "{{aip_tenancy}}"
          Name: "{{aip_tenancy}}__aip_linux_node" 
    - name: Get linux registry ip
      ec2_instance_info:
        filters:
          "tag:Registry": linux
          instance-state-name: "running"
      register: aws_linux_registry 
# ##########################
# Common Docker windows init 
# ##########################
- hosts: aws_windows
  name: Common configuration for windows instances
  gather_facts: no

  pre_tasks:
    - name: Wait for WinRM to come up
      wait_for_connection:
        #delay: 60
        timeout: 320

    - name: Gather facts for the first time
      setup:

    - name: Configure windows firewall for docker swarm
      import_tasks: prepare-firewall-for-swarm.yml

  tasks: 
    # In case the root ebs has changed, resize the C partition
    - name: Resize previously created partition to it's maximum size
      win_partition:
        drive_letter: C
        partition_size: -1

    - name: Get windows registry ip
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_instance_info:
        filters:
          "tag:Registry": windows
          instance-state-name: "running"
      register: aws_windows_registry 
    - name: Configure docker daemon
      import_role:
        name: docker_daemon
      vars:
        insecure_registry:
          ip: "{{aws_windows_registry.instances[0].private_ip_address}}"
          port: 5000
  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init
          Swarm: swarm_worker

# ##########################
# Common Docker linux init 
# ##########################
- hosts: aws_linux
  name: Common configuration for linux instances
  gather_facts: no

  pre_tasks:
    - name: Wait for connection
      wait_for_connection:
        #delay: 60
        timeout: 320

    - name: Gather facts for the first time
      setup:

  tasks:
    - name: Get linux registry ip
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_instance_info:
        filters:
          "tag:Registry": linux
          instance-state-name: "running"
      register: aws_linux_registry 
    - name: Configure docker daemon
      import_role:
        name: docker_daemon
      vars:
        insecure_registry:
          ip: "{{aws_linux_registry.instances[0].private_ip_address}}"
          port: 5000

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init

# ############
# Swarm master
# ############
- hosts: swarm_master:&aws_linux
  name: Configuration for linux swarm master
  gather_facts: no
  tasks: 
    - name: List swarm managers
      shell: docker node ls -q -f "role=manager"
      register: swarm_managers
      ignore_errors: yes 

    - name: Init swarm master
      shell: "docker swarm init --advertise-addr {{private_ip_address}}"
      when: swarm_managers and swarm_managers.stdout == ""

    - name: Get swarm token
      shell: "docker swarm join-token -q worker"
      register: swarm_token

    - name: Portainer compose file
      template:
        src: portainer-agent-stack.yml.j2
        dest: /tmp/portainer-agent-stack.yml

    - name: Deploy portainer stack
      shell: "docker stack deploy --compose-file=/tmp/portainer-agent-stack.yml portainer"

    - name: AIP compose file
      template:
        src: aip-stack.yml.j2
        dest: /tmp/aip-stack.yml
      tags:
        - aip_stack

    - name: Tag with the swarm join token
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Swarm_token: "{{swarm_token.stdout}}"


# ##################
# Swarm linux worker
# ##################
- hosts: aip_linux_worker_node
  name: Configuration swarm linux workers
  tasks:
    - name: Get join token from master instance
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_instance_info:
        filters:
          "tag:Swarm": swarm_master
          instance-state-name: "running"
      register: swarm_master_instance

    - name: Join swarm as linux worker
      remote_user: admin
      block: 
        - name: Swarm join
          shell: "docker swarm join --token {{swarm_master_instance.instances[0].tags.Swarm_token}} {{swarm_master_instance.instances[0].private_ip_address}}:2377"

# ####################
# Swarm windows worker
# ####################
- hosts: aip_win_worker_node
  name: Configuration swarm windows workers
  gather_facts: no

  tasks:
    - name: Get join token from master instance
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_instance_info:
        filters:
          "tag:Swarm": swarm_master
          instance-state-name: "running"
      register: swarm_master_instance

    - name: Join swarm as windows worker
      block: 
        - name: Swarm join
          win_command: "docker swarm join --token {{swarm_master_instance.instances[0].tags.Swarm_token}} {{swarm_master_instance.instances[0].private_ip_address}}:2377"

    # TODO: https://portainer.readthedocs.io/en/latest/agent.html#agent 
    # Because of Docker limitation you need to deploy the Agent to all Windows Server nodes by running following command on each of them
    - name: Portainer windows agent
      win_command: 'docker run -d --name portainer_agent --restart always --network portainer_agent_network -e AGENT_CLUSTER_ADDR=tasks.portainer_agent --mount type=npipe,source=\\.\pipe\docker_engine,target=\\.\pipe\docker_engine portainer/agent:windows1809-amd64'
      tags:
        - portainer-agent
