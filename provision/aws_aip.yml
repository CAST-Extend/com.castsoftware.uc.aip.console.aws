---
# Expands the platform in the given subnet:
# - Create security groups (in-out networking rule)
# - Public keys
# - Create instances
#
# All ec2 instances created here are tagged with "Stage: expand"
# This tag is used in subsequents inventories to group
#  instances by stage and limit (with --limit) the set
#  of instances to apply playbooks to.
#
# Once an instance with "Stage: expand" has the matching playbook
#   applied, it is tagged with "Stage: init"
- hosts: localhost:&expand
  connection: local

  vars_files:
    - vars/aws-defaults.yml
    - vars/aip-defaults.yml

  vars:
    id_rsa_pub: '{{private_key}}.pub'
    aip_node_count: 2

  tasks:

    # TODO: The same group is defined in bootstrap.yml
    - name: Create insubnet sec group
      ec2_group:
        name: aip_default 
        description: Allow in group and ssh communication
        rules:
          - proto: all
            group_name: aip_default
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0

    - name: Open http port for aip console
      tags:
        - aipconsole
      ec2_group:
        name: aip_console
        description: Allow aip console http port
        rules:
          - proto: tcp
            ports:
              - 8081
            cidr_ip: 0.0.0.0/0
            rule_desc: allow http port for aip console

    - name: Create key pair
      ec2_key:
        name: 'key_{{ansible_user_id}}'
        key_material: "{{ lookup('file', '{{ id_rsa_pub }}') }}"

    - name: Find latest baked ami for aip node
      tags:
        - aipnode
      ec2_ami_find:
        owner: self
        name: aip_node-{{cast_aip_version}}
        no_result_action: fail
      register: ami_find

    - name: Create windows aip node
      tags:
        - aipnode
      ec2:
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ ami_find.results[0].ami_id }}'
        groups:
          - aip_default
        wait: true
        exact_count: '{{aip_node_count}}'
        count_tag:
          Name: aip_node
        instance_tags:
          Stage: expand
          Name: aip_node
          Groups: aip_node_hosts
      register: aip_node

    - name: Create aip postgres nodes
      tags:
        - aippostgres
      ec2:
        key_name: 'key_{{ansible_user_id}}'
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ debian_ami_id }}'
        groups:
          - aip_default
        wait: true
        private_ip: '{{aip_postgres_ip}}'
        instance_tags:
          Stage: expand
          Name: aip_postgres
          Groups: aip_postgres_hosts
      when: "aip_postgres_ip not in (hostvars.values()|map(attribute='private_ip_address')|list|string)"

    - name: Create aip dashboard nodes
      tags:
        - aipdashboard
      ec2:
        key_name: 'key_{{ansible_user_id}}'
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ debian_ami_id }}'
        groups:
          - aip_default
        wait: true
        private_ip: '{{aip_dashboard_ip}}'
        instance_tags:
          Stage: expand
          Name: aip_dashboard
          Groups: aip_dashboard_hosts
      when: "aip_dashboard_ip not in (hostvars.values()|map(attribute='private_ip_address')|list|string)"

    - name: Create aip console nodes
      tags:
        - aipconsole
      ec2:
        key_name: 'key_{{ansible_user_id}}'
        instance_type: t2.small
        vpc_subnet_id: '{{vpc_subnet_id}}'
        image: '{{ debian_ami_id }}'
        groups:
          - aip_default
          - aip_console
        wait: true
        private_ip: '{{aip_console_ip}}'
        instance_tags:
          Stage: expand
          Name: aip_console
          Groups: aip_console_hosts
      when: "aip_console_ip not in (hostvars.values()|map(attribute='private_ip_address')|list|string)"

    - name: Set stage
      set_fact:
        stage: expand

#############
#AIP POSTGRES
#############

- hosts: aip_postgres_hosts
  name: Postgres aip nodes
  remote_user: admin
  gather_facts: no

  vars_files:
    - vars/aws-defaults.yml
    - vars/aip-defaults.yml

  vars:
    cast_postgres_port: 5432
    cast_postgres_host: '{{aip_postgres_ip}}'

  pre_tasks:
    - name: Wait for WinRM to come up
      tags:
        - hello
      wait_for_connection:
        #delay: 60
        timeout: 320

    - name: Gather facts for the first time
      tags:
        - hello
      setup:

    - name: Disable Domain firewall
  vars:
    ansible_ssh_private_key_file: '{{ private_key }}'
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no

  pre_tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        timeout: 320

    - name: Gather facts for the first time
      setup:

    - name: Install ntp
      become: yes
      apt:
        name: ntp

    - name: Install pip
      become: yes
      apt:
        name: python-pip

    - name: Check NTP service
      service: name=ntp state=started

  roles:
    - { role: aip-css, become: true }

  #TODO:duplication
  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init

###########
# AIP NODES
###########

- hosts: aip_node_hosts
  name: Windows aip nodes
  remote_user: Administrator
  gather_facts: no

  vars_files:
    - vars/aws-defaults.yml
    - vars/aip-defaults.yml
    - vars/aip-win-connection.yml

  vars:
    cast_postgres_port: 5432
    cast_postgres_host: '{{aip_postgres_ip}}'

  pre_tasks:
    - name: Wait for WinRM to come up
      tags:
        - hello
      wait_for_connection:
        #delay: 60
        timeout: 320

    - name: Gather facts for the first time
      tags:
        - hello
      setup:

    - name: Disable Domain firewall
      win_firewall:
        state: disabled
        profiles:
          - Domain
          - Public
          - Private

  roles:
    - { role: aip-node-api }

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init
###############
# AIP DASHBOARD
###############

- hosts: aip_dashboard_hosts
  name: Dashboard node
  remote_user: admin
  gather_facts: no


  vars_files:
    - vars/aws-defaults.yml
    - vars/aip-defaults.yml

  vars:
    ansible_ssh_private_key_file: '{{ private_key }}'
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no

  pre_tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        timeout: 320

    - name: Gather facts for the first time
      setup:

  roles:
    - { role: aip-dashboard }

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init

################
# AIP WEBCONSOLE
###############

- hosts: aip_console_hosts
  name: Webi aip console nodes
  remote_user: admin
  gather_facts: no

  vars_files:
    - vars/aws-defaults.yml
    - vars/aip-defaults.yml

  vars:
    ansible_ssh_private_key_file: '{{ private_key }}'
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no

  pre_tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        timeout: 320

    - name: Gather facts for the first time
      setup:

  roles:
    - { role: aip-console }

  post_tasks:
    - name: Tag stage as init
      delegate_to: localhost
      vars:
        ansible_connection: local
      ec2_tag:
        resource: '{{instance_id}}'
        tags:
          Stage: init
